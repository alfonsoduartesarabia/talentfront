/*
 * This file is generated by jOOQ.
 */
package com.talentfront.jooq.tables;


import com.talentfront.jooq.Db;
import com.talentfront.jooq.Indexes;
import com.talentfront.jooq.Keys;
import com.talentfront.jooq.tables.records.UserInfoRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.2",
        "schema version:8.1"
    },
    date = "2021-04-12T08:11:55.614Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserInfo extends TableImpl<UserInfoRecord> {

    private static final long serialVersionUID = -1110698151;

    /**
     * The reference instance of <code>db.user_info</code>
     */
    public static final UserInfo USER_INFO = new UserInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserInfoRecord> getRecordType() {
        return UserInfoRecord.class;
    }

    /**
     * The column <code>db.user_info.user_info_id</code>.
     */
    public final TableField<UserInfoRecord, Integer> USER_INFO_ID = createField(DSL.name("user_info_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>db.user_info.description</code>.
     */
    public final TableField<UserInfoRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>db.user_info.user_id</code>.
     */
    public final TableField<UserInfoRecord, Integer> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>db.user_info.user_info_type</code>.
     */
    public final TableField<UserInfoRecord, String> USER_INFO_TYPE = createField(DSL.name("user_info_type"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * Create a <code>db.user_info</code> table reference
     */
    public UserInfo() {
        this(DSL.name("user_info"), null);
    }

    /**
     * Create an aliased <code>db.user_info</code> table reference
     */
    public UserInfo(String alias) {
        this(DSL.name(alias), USER_INFO);
    }

    /**
     * Create an aliased <code>db.user_info</code> table reference
     */
    public UserInfo(Name alias) {
        this(alias, USER_INFO);
    }

    private UserInfo(Name alias, Table<UserInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserInfo(Name alias, Table<UserInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> UserInfo(Table<O> child, ForeignKey<O, UserInfoRecord> key) {
        super(child, key, USER_INFO);
    }

    @Override
    public Schema getSchema() {
        return Db.DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_INFO_USER_ID_FK);
    }

    @Override
    public Identity<UserInfoRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER_INFO;
    }

    @Override
    public UniqueKey<UserInfoRecord> getPrimaryKey() {
        return Keys.KEY_USER_INFO_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<UserInfoRecord>>asList(Keys.KEY_USER_INFO_PRIMARY);
    }

    @Override
    public List<ForeignKey<UserInfoRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserInfoRecord, ?>>asList(Keys.USER_INFO_USER_ID_FK);
    }

    public User user() {
        return new User(this, Keys.USER_INFO_USER_ID_FK);
    }

    @Override
    public UserInfo as(String alias) {
        return new UserInfo(DSL.name(alias), this);
    }

    @Override
    public UserInfo as(Name alias) {
        return new UserInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserInfo rename(String name) {
        return new UserInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserInfo rename(Name name) {
        return new UserInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
