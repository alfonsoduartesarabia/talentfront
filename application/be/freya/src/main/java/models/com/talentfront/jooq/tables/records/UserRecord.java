/*
 * This file is generated by jOOQ.
 */
package com.talentfront.jooq.tables.records;


import com.talentfront.jooq.tables.User;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.2",
        "schema version:8.1"
    },
    date = "2021-04-12T08:11:55.614Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserRecord extends UpdatableRecordImpl<UserRecord> implements Record7<Integer, String, byte[], byte[], Integer, String, String> {

    private static final long serialVersionUID = -627972969;

    /**
     * Setter for <code>db.user.user_id</code>.
     */
    public void setUserId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>db.user.user_id</code>.
     */
    public Integer getUserId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>db.user.email</code>.
     */
    public void setEmail(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>db.user.email</code>.
     */
    public String getEmail() {
        return (String) get(1);
    }

    /**
     * Setter for <code>db.user.salt_password_hash</code>.
     */
    public void setSaltPasswordHash(byte[] value) {
        set(2, value);
    }

    /**
     * Getter for <code>db.user.salt_password_hash</code>.
     */
    public byte[] getSaltPasswordHash() {
        return (byte[]) get(2);
    }

    /**
     * Setter for <code>db.user.salt</code>.
     */
    public void setSalt(byte[] value) {
        set(3, value);
    }

    /**
     * Getter for <code>db.user.salt</code>.
     */
    public byte[] getSalt() {
        return (byte[]) get(3);
    }

    /**
     * Setter for <code>db.user.user_type_id</code>.
     */
    public void setUserTypeId(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>db.user.user_type_id</code>.
     */
    public Integer getUserTypeId() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>db.user.first_name</code>.
     */
    public void setFirstName(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>db.user.first_name</code>.
     */
    public String getFirstName() {
        return (String) get(5);
    }

    /**
     * Setter for <code>db.user.last_name</code>.
     */
    public void setLastName(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>db.user.last_name</code>.
     */
    public String getLastName() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, byte[], byte[], Integer, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Integer, String, byte[], byte[], Integer, String, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return User.USER.USER_ID;
    }

    @Override
    public Field<String> field2() {
        return User.USER.EMAIL;
    }

    @Override
    public Field<byte[]> field3() {
        return User.USER.SALT_PASSWORD_HASH;
    }

    @Override
    public Field<byte[]> field4() {
        return User.USER.SALT;
    }

    @Override
    public Field<Integer> field5() {
        return User.USER.USER_TYPE_ID;
    }

    @Override
    public Field<String> field6() {
        return User.USER.FIRST_NAME;
    }

    @Override
    public Field<String> field7() {
        return User.USER.LAST_NAME;
    }

    @Override
    public Integer component1() {
        return getUserId();
    }

    @Override
    public String component2() {
        return getEmail();
    }

    @Override
    public byte[] component3() {
        return getSaltPasswordHash();
    }

    @Override
    public byte[] component4() {
        return getSalt();
    }

    @Override
    public Integer component5() {
        return getUserTypeId();
    }

    @Override
    public String component6() {
        return getFirstName();
    }

    @Override
    public String component7() {
        return getLastName();
    }

    @Override
    public Integer value1() {
        return getUserId();
    }

    @Override
    public String value2() {
        return getEmail();
    }

    @Override
    public byte[] value3() {
        return getSaltPasswordHash();
    }

    @Override
    public byte[] value4() {
        return getSalt();
    }

    @Override
    public Integer value5() {
        return getUserTypeId();
    }

    @Override
    public String value6() {
        return getFirstName();
    }

    @Override
    public String value7() {
        return getLastName();
    }

    @Override
    public UserRecord value1(Integer value) {
        setUserId(value);
        return this;
    }

    @Override
    public UserRecord value2(String value) {
        setEmail(value);
        return this;
    }

    @Override
    public UserRecord value3(byte[] value) {
        setSaltPasswordHash(value);
        return this;
    }

    @Override
    public UserRecord value4(byte[] value) {
        setSalt(value);
        return this;
    }

    @Override
    public UserRecord value5(Integer value) {
        setUserTypeId(value);
        return this;
    }

    @Override
    public UserRecord value6(String value) {
        setFirstName(value);
        return this;
    }

    @Override
    public UserRecord value7(String value) {
        setLastName(value);
        return this;
    }

    @Override
    public UserRecord values(Integer value1, String value2, byte[] value3, byte[] value4, Integer value5, String value6, String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserRecord
     */
    public UserRecord() {
        super(User.USER);
    }

    /**
     * Create a detached, initialised UserRecord
     */
    public UserRecord(Integer userId, String email, byte[] saltPasswordHash, byte[] salt, Integer userTypeId, String firstName, String lastName) {
        super(User.USER);

        set(0, userId);
        set(1, email);
        set(2, saltPasswordHash);
        set(3, salt);
        set(4, userTypeId);
        set(5, firstName);
        set(6, lastName);
    }
}
