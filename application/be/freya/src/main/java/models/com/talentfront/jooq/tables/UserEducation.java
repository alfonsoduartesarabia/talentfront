/*
 * This file is generated by jOOQ.
 */
package com.talentfront.jooq.tables;


import com.talentfront.jooq.Db;
import com.talentfront.jooq.Indexes;
import com.talentfront.jooq.Keys;
import com.talentfront.jooq.tables.records.UserEducationRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.2",
        "schema version:8.1"
    },
    date = "2021-04-12T08:11:55.614Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserEducation extends TableImpl<UserEducationRecord> {

    private static final long serialVersionUID = -450090547;

    /**
     * The reference instance of <code>db.user_education</code>
     */
    public static final UserEducation USER_EDUCATION = new UserEducation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserEducationRecord> getRecordType() {
        return UserEducationRecord.class;
    }

    /**
     * The column <code>db.user_education.user_education_id</code>.
     */
    public final TableField<UserEducationRecord, Integer> USER_EDUCATION_ID = createField(DSL.name("user_education_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>db.user_education.school</code>.
     */
    public final TableField<UserEducationRecord, String> SCHOOL = createField(DSL.name("school"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>db.user_education.degree_type</code>.
     */
    public final TableField<UserEducationRecord, String> DEGREE_TYPE = createField(DSL.name("degree_type"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>db.user_education.major</code>.
     */
    public final TableField<UserEducationRecord, String> MAJOR = createField(DSL.name("major"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>db.user_education.state</code>.
     */
    public final TableField<UserEducationRecord, String> STATE = createField(DSL.name("state"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>db.user_education.user_id</code>.
     */
    public final TableField<UserEducationRecord, Integer> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>db.user_education</code> table reference
     */
    public UserEducation() {
        this(DSL.name("user_education"), null);
    }

    /**
     * Create an aliased <code>db.user_education</code> table reference
     */
    public UserEducation(String alias) {
        this(DSL.name(alias), USER_EDUCATION);
    }

    /**
     * Create an aliased <code>db.user_education</code> table reference
     */
    public UserEducation(Name alias) {
        this(alias, USER_EDUCATION);
    }

    private UserEducation(Name alias, Table<UserEducationRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserEducation(Name alias, Table<UserEducationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> UserEducation(Table<O> child, ForeignKey<O, UserEducationRecord> key) {
        super(child, key, USER_EDUCATION);
    }

    @Override
    public Schema getSchema() {
        return Db.DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_EDUCATION_USER_ID_FK);
    }

    @Override
    public Identity<UserEducationRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER_EDUCATION;
    }

    @Override
    public UniqueKey<UserEducationRecord> getPrimaryKey() {
        return Keys.KEY_USER_EDUCATION_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserEducationRecord>> getKeys() {
        return Arrays.<UniqueKey<UserEducationRecord>>asList(Keys.KEY_USER_EDUCATION_PRIMARY);
    }

    @Override
    public List<ForeignKey<UserEducationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserEducationRecord, ?>>asList(Keys.USER_EDUCATION_USER_ID_FK);
    }

    public User user() {
        return new User(this, Keys.USER_EDUCATION_USER_ID_FK);
    }

    @Override
    public UserEducation as(String alias) {
        return new UserEducation(DSL.name(alias), this);
    }

    @Override
    public UserEducation as(Name alias) {
        return new UserEducation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserEducation rename(String name) {
        return new UserEducation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserEducation rename(Name name) {
        return new UserEducation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String, String, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
