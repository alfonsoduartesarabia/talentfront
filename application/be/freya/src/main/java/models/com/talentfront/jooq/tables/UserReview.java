/*
 * This file is generated by jOOQ.
 */
package com.talentfront.jooq.tables;


import com.talentfront.jooq.Db;
import com.talentfront.jooq.Indexes;
import com.talentfront.jooq.Keys;
import com.talentfront.jooq.tables.records.UserReviewRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.2",
        "schema version:3.1"
    },
    date = "2021-03-15T00:48:38.982Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserReview extends TableImpl<UserReviewRecord> {

    private static final long serialVersionUID = -247514395;

    /**
     * The reference instance of <code>db.user_review</code>
     */
    public static final UserReview USER_REVIEW = new UserReview();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserReviewRecord> getRecordType() {
        return UserReviewRecord.class;
    }

    /**
     * The column <code>db.user_review.user_review_id</code>.
     */
    public final TableField<UserReviewRecord, Integer> USER_REVIEW_ID = createField(DSL.name("user_review_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>db.user_review.review_data</code>.
     */
    public final TableField<UserReviewRecord, String> REVIEW_DATA = createField(DSL.name("review_data"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>db.user_review.reviewer_id</code>.
     */
    public final TableField<UserReviewRecord, Integer> REVIEWER_ID = createField(DSL.name("reviewer_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>db.user_review.reviewee_id</code>.
     */
    public final TableField<UserReviewRecord, Integer> REVIEWEE_ID = createField(DSL.name("reviewee_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>db.user_review</code> table reference
     */
    public UserReview() {
        this(DSL.name("user_review"), null);
    }

    /**
     * Create an aliased <code>db.user_review</code> table reference
     */
    public UserReview(String alias) {
        this(DSL.name(alias), USER_REVIEW);
    }

    /**
     * Create an aliased <code>db.user_review</code> table reference
     */
    public UserReview(Name alias) {
        this(alias, USER_REVIEW);
    }

    private UserReview(Name alias, Table<UserReviewRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserReview(Name alias, Table<UserReviewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> UserReview(Table<O> child, ForeignKey<O, UserReviewRecord> key) {
        super(child, key, USER_REVIEW);
    }

    @Override
    public Schema getSchema() {
        return Db.DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_REVIEW_REVIEWEE_ID_FK, Indexes.USER_REVIEW_REVIEWER_ID_FK);
    }

    @Override
    public Identity<UserReviewRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER_REVIEW;
    }

    @Override
    public UniqueKey<UserReviewRecord> getPrimaryKey() {
        return Keys.KEY_USER_REVIEW_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserReviewRecord>> getKeys() {
        return Arrays.<UniqueKey<UserReviewRecord>>asList(Keys.KEY_USER_REVIEW_PRIMARY);
    }

    @Override
    public List<ForeignKey<UserReviewRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserReviewRecord, ?>>asList(Keys.USER_REVIEW_REVIEWER_ID_FK, Keys.USER_REVIEW_REVIEWEE_ID_FK);
    }

    public User userReviewReviewerIdFk() {
        return new User(this, Keys.USER_REVIEW_REVIEWER_ID_FK);
    }

    public User userReviewRevieweeIdFk() {
        return new User(this, Keys.USER_REVIEW_REVIEWEE_ID_FK);
    }

    @Override
    public UserReview as(String alias) {
        return new UserReview(DSL.name(alias), this);
    }

    @Override
    public UserReview as(Name alias) {
        return new UserReview(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserReview rename(String name) {
        return new UserReview(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserReview rename(Name name) {
        return new UserReview(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
