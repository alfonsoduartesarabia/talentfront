/*
 * This file is generated by jOOQ.
 */
package com.talentfront.jooq.tables;


import com.talentfront.jooq.Db;
import com.talentfront.jooq.Keys;
import com.talentfront.jooq.tables.records.CompanyImageRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.2",
        "schema version:9.1"
    },
    date = "2021-05-08T20:05:20.887Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CompanyImage extends TableImpl<CompanyImageRecord> {

    private static final long serialVersionUID = -326063684;

    /**
     * The reference instance of <code>db.company_image</code>
     */
    public static final CompanyImage COMPANY_IMAGE = new CompanyImage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompanyImageRecord> getRecordType() {
        return CompanyImageRecord.class;
    }

    /**
     * The column <code>db.company_image.company_image_id</code>.
     */
    public final TableField<CompanyImageRecord, Integer> COMPANY_IMAGE_ID = createField(DSL.name("company_image_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>db.company_image.company_id</code>.
     */
    public final TableField<CompanyImageRecord, Integer> COMPANY_ID = createField(DSL.name("company_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>db.company_image.content_type</code>.
     */
    public final TableField<CompanyImageRecord, String> CONTENT_TYPE = createField(DSL.name("content_type"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>db.company_image.img</code>.
     */
    public final TableField<CompanyImageRecord, byte[]> IMG = createField(DSL.name("img"), org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>db.company_image.title</code>.
     */
    public final TableField<CompanyImageRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>db.company_image.created_dt</code>.
     */
    public final TableField<CompanyImageRecord, LocalDateTime> CREATED_DT = createField(DSL.name("created_dt"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>db.company_image</code> table reference
     */
    public CompanyImage() {
        this(DSL.name("company_image"), null);
    }

    /**
     * Create an aliased <code>db.company_image</code> table reference
     */
    public CompanyImage(String alias) {
        this(DSL.name(alias), COMPANY_IMAGE);
    }

    /**
     * Create an aliased <code>db.company_image</code> table reference
     */
    public CompanyImage(Name alias) {
        this(alias, COMPANY_IMAGE);
    }

    private CompanyImage(Name alias, Table<CompanyImageRecord> aliased) {
        this(alias, aliased, null);
    }

    private CompanyImage(Name alias, Table<CompanyImageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> CompanyImage(Table<O> child, ForeignKey<O, CompanyImageRecord> key) {
        super(child, key, COMPANY_IMAGE);
    }

    @Override
    public Schema getSchema() {
        return Db.DB;
    }

    @Override
    public Identity<CompanyImageRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COMPANY_IMAGE;
    }

    @Override
    public UniqueKey<CompanyImageRecord> getPrimaryKey() {
        return Keys.KEY_COMPANY_IMAGE_PRIMARY;
    }

    @Override
    public List<UniqueKey<CompanyImageRecord>> getKeys() {
        return Arrays.<UniqueKey<CompanyImageRecord>>asList(Keys.KEY_COMPANY_IMAGE_PRIMARY);
    }

    @Override
    public List<ForeignKey<CompanyImageRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CompanyImageRecord, ?>>asList(Keys.COMPANY_IMAGE_COMPANY_ID_FK);
    }

    public Company company() {
        return new Company(this, Keys.COMPANY_IMAGE_COMPANY_ID_FK);
    }

    @Override
    public CompanyImage as(String alias) {
        return new CompanyImage(DSL.name(alias), this);
    }

    @Override
    public CompanyImage as(Name alias) {
        return new CompanyImage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyImage rename(String name) {
        return new CompanyImage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CompanyImage rename(Name name) {
        return new CompanyImage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, String, byte[], String, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
