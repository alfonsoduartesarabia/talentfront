/*
 * This file is generated by jOOQ.
 */
package com.talentfront.jooq.tables;


import com.talentfront.jooq.Db;
import com.talentfront.jooq.Indexes;
import com.talentfront.jooq.Keys;
import com.talentfront.jooq.tables.records.MediaRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.2",
        "schema version:5.1"
    },
    date = "2021-04-11T05:11:40.089Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Media extends TableImpl<MediaRecord> {

    private static final long serialVersionUID = -723598712;

    /**
     * The reference instance of <code>db.media</code>
     */
    public static final Media MEDIA = new Media();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MediaRecord> getRecordType() {
        return MediaRecord.class;
    }

    /**
     * The column <code>db.media.media_id</code>.
     */
    public final TableField<MediaRecord, Integer> MEDIA_ID = createField(DSL.name("media_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>db.media.encoding</code>.
     */
    public final TableField<MediaRecord, String> ENCODING = createField(DSL.name("encoding"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>db.media.user_id</code>.
     */
    public final TableField<MediaRecord, Integer> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>db.media.file</code>.
     */
    public final TableField<MediaRecord, byte[]> FILE = createField(DSL.name("file"), org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>db.media.title</code>.
     */
    public final TableField<MediaRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>db.media.created_dt</code>.
     */
    public final TableField<MediaRecord, LocalDateTime> CREATED_DT = createField(DSL.name("created_dt"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>db.media</code> table reference
     */
    public Media() {
        this(DSL.name("media"), null);
    }

    /**
     * Create an aliased <code>db.media</code> table reference
     */
    public Media(String alias) {
        this(DSL.name(alias), MEDIA);
    }

    /**
     * Create an aliased <code>db.media</code> table reference
     */
    public Media(Name alias) {
        this(alias, MEDIA);
    }

    private Media(Name alias, Table<MediaRecord> aliased) {
        this(alias, aliased, null);
    }

    private Media(Name alias, Table<MediaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Media(Table<O> child, ForeignKey<O, MediaRecord> key) {
        super(child, key, MEDIA);
    }

    @Override
    public Schema getSchema() {
        return Db.DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MEDIA_USER_ID_FK);
    }

    @Override
    public Identity<MediaRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MEDIA;
    }

    @Override
    public UniqueKey<MediaRecord> getPrimaryKey() {
        return Keys.KEY_MEDIA_PRIMARY;
    }

    @Override
    public List<UniqueKey<MediaRecord>> getKeys() {
        return Arrays.<UniqueKey<MediaRecord>>asList(Keys.KEY_MEDIA_PRIMARY);
    }

    @Override
    public List<ForeignKey<MediaRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MediaRecord, ?>>asList(Keys.MEDIA_USER_ID_FK);
    }

    public User user() {
        return new User(this, Keys.MEDIA_USER_ID_FK);
    }

    @Override
    public Media as(String alias) {
        return new Media(DSL.name(alias), this);
    }

    @Override
    public Media as(Name alias) {
        return new Media(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Media rename(String name) {
        return new Media(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Media rename(Name name) {
        return new Media(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, Integer, byte[], String, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
