/*
 * This file is generated by jOOQ.
 */
package com.talentfront.jooq.tables;


import com.talentfront.jooq.Db;
import com.talentfront.jooq.Indexes;
import com.talentfront.jooq.Keys;
import com.talentfront.jooq.tables.records.UserExperienceRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.2",
        "schema version:9.1"
    },
    date = "2021-04-14T18:06:43.912Z",
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserExperience extends TableImpl<UserExperienceRecord> {

    private static final long serialVersionUID = -871390076;

    /**
     * The reference instance of <code>db.user_experience</code>
     */
    public static final UserExperience USER_EXPERIENCE = new UserExperience();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserExperienceRecord> getRecordType() {
        return UserExperienceRecord.class;
    }

    /**
     * The column <code>db.user_experience.user_exeperince_id</code>.
     */
    public final TableField<UserExperienceRecord, Integer> USER_EXEPERINCE_ID = createField(DSL.name("user_exeperince_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>db.user_experience.job_title</code>.
     */
    public final TableField<UserExperienceRecord, String> JOB_TITLE = createField(DSL.name("job_title"), org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>db.user_experience.company</code>.
     */
    public final TableField<UserExperienceRecord, String> COMPANY = createField(DSL.name("company"), org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>db.user_experience.description</code>.
     */
    public final TableField<UserExperienceRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>db.user_experience.date_start</code>.
     */
    public final TableField<UserExperienceRecord, LocalDate> DATE_START = createField(DSL.name("date_start"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>db.user_experience.date_end</code>.
     */
    public final TableField<UserExperienceRecord, LocalDate> DATE_END = createField(DSL.name("date_end"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>db.user_experience.user_id</code>.
     */
    public final TableField<UserExperienceRecord, Integer> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>db.user_experience</code> table reference
     */
    public UserExperience() {
        this(DSL.name("user_experience"), null);
    }

    /**
     * Create an aliased <code>db.user_experience</code> table reference
     */
    public UserExperience(String alias) {
        this(DSL.name(alias), USER_EXPERIENCE);
    }

    /**
     * Create an aliased <code>db.user_experience</code> table reference
     */
    public UserExperience(Name alias) {
        this(alias, USER_EXPERIENCE);
    }

    private UserExperience(Name alias, Table<UserExperienceRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserExperience(Name alias, Table<UserExperienceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> UserExperience(Table<O> child, ForeignKey<O, UserExperienceRecord> key) {
        super(child, key, USER_EXPERIENCE);
    }

    @Override
    public Schema getSchema() {
        return Db.DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_EXPERIENCE_USER_ID_FK);
    }

    @Override
    public Identity<UserExperienceRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER_EXPERIENCE;
    }

    @Override
    public UniqueKey<UserExperienceRecord> getPrimaryKey() {
        return Keys.KEY_USER_EXPERIENCE_PRIMARY;
    }

    @Override
    public List<UniqueKey<UserExperienceRecord>> getKeys() {
        return Arrays.<UniqueKey<UserExperienceRecord>>asList(Keys.KEY_USER_EXPERIENCE_PRIMARY);
    }

    @Override
    public List<ForeignKey<UserExperienceRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserExperienceRecord, ?>>asList(Keys.USER_EXPERIENCE_USER_ID_FK);
    }

    public User user() {
        return new User(this, Keys.USER_EXPERIENCE_USER_ID_FK);
    }

    @Override
    public UserExperience as(String alias) {
        return new UserExperience(DSL.name(alias), this);
    }

    @Override
    public UserExperience as(Name alias) {
        return new UserExperience(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserExperience rename(String name) {
        return new UserExperience(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserExperience rename(Name name) {
        return new UserExperience(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, LocalDate, LocalDate, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
